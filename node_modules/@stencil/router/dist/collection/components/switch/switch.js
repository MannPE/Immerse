var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import uuidv4 from '../../utils/uuid';
import ActiveRouter from '../../global/active-router';
import { matchPath } from '../../utils/match-path';
function getUniqueId() {
    if (window.crypto) {
        return uuidv4();
    }
    return (Math.random() * 10e16).toString().match(/.{4}/g).join('-');
}
function getMatch(pathname, url, exact) {
    return matchPath(pathname, {
        path: url,
        exact: exact,
        strict: true
    });
}
export class RouteSwitch {
    constructor() {
        this.group = getUniqueId();
        this.scrollTopOffset = null;
        this.activeIndex = null;
    }
    componentWillLoad() {
        this.regenerateSubscribers(this.location);
    }
    regenerateSubscribers(newLocation) {
        return __awaiter(this, void 0, void 0, function* () {
            let newActiveIndex = null;
            this.subscribers = Array.from(this.el.children)
                .map((childElement, index) => {
                const match = getMatch(newLocation.pathname, childElement.url, childElement.exact);
                if (match && newActiveIndex === null) {
                    newActiveIndex = index;
                }
                return {
                    el: childElement,
                    match: match
                };
            });
            // Check if this actually changes which child is active
            // then just pass the new match down if the active route isn't changing.
            if (this.activeIndex === newActiveIndex) {
                this.subscribers[this.activeIndex].el.groupMatch = this.subscribers[this.activeIndex].match;
                return;
            }
            this.activeIndex = newActiveIndex;
            // Set all props on the new active route then wait until it says that it
            // is completed
            new Promise((resolve) => {
                const activeChild = this.subscribers[this.activeIndex];
                activeChild.el.scrollTopOffset = this.scrollTopOffset;
                activeChild.el.group = this.group;
                activeChild.el.groupMatch = activeChild.match;
                activeChild.el.componentUpdated = resolve;
            })
                .then((routeViewUpdatedOptions) => {
                // After the new active route has completed then update visibility of routes
                this.queue.write(() => {
                    this.subscribers.forEach((child, index) => {
                        child.el.componentUpdated = null;
                        if (index === this.activeIndex) {
                            return child.el.style.display = null;
                        }
                        child.el.scrollTopOffset = this.scrollTopOffset;
                        child.el.group = this.group;
                        child.el.groupMatch = null;
                        child.el.style.display = 'none';
                    });
                });
                this.routeViewsUpdated(Object.assign({ scrollTopOffset: this.scrollTopOffset }, routeViewUpdatedOptions));
            });
        });
    }
    render() {
        return (h("slot", null));
    }
    static get is() { return "stencil-route-switch"; }
    static get properties() { return {
        "el": {
            "elementRef": true
        },
        "group": {
            "type": String,
            "attr": "group",
            "reflectToAttr": true
        },
        "location": {
            "type": "Any",
            "attr": "location",
            "watchCallbacks": ["regenerateSubscribers"]
        },
        "queue": {
            "context": "queue"
        },
        "routeViewsUpdated": {
            "type": "Any",
            "attr": "route-views-updated"
        },
        "scrollTopOffset": {
            "type": Number,
            "attr": "scroll-top-offset"
        }
    }; }
}
ActiveRouter.injectProps(RouteSwitch, [
    'location',
    'routeViewsUpdated'
]);
