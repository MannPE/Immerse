import * as d from '../../declarations';
export declare class BuildContext implements d.BuildCtx {
    private config;
    private compilerCtx;
    appFileBuildCount: number;
    buildId: number;
    buildMessages: string[];
    timestamp: string;
    buildResults: d.BuildResults;
    bundleBuildCount: number;
    collections: d.Collection[];
    components: string[];
    data: any;
    diagnostics: d.Diagnostic[];
    dirsAdded: string[];
    dirsDeleted: string[];
    entryModules: d.EntryModule[];
    entryPoints: d.EntryPoint[];
    filesAdded: string[];
    filesChanged: string[];
    filesDeleted: string[];
    filesUpdated: string[];
    filesWritten: string[];
    global: d.ModuleFile;
    graphData: d.GraphData;
    hasConfigChanges: boolean;
    hasCopyChanges: boolean;
    hasFinished: boolean;
    hasIndexHtmlChanges: boolean;
    hasPrintedResults: boolean;
    hasServiceWorkerChanges: boolean;
    hasScriptChanges: boolean;
    hasSlot: boolean;
    hasStyleChanges: boolean;
    hasSvg: boolean;
    indexBuildCount: number;
    isRebuild: boolean;
    requiresFullBuild: boolean;
    scriptsAdded: string[];
    scriptsDeleted: string[];
    startTime: number;
    styleBuildCount: number;
    stylesUpdated: d.BuildStyleUpdate[];
    timeSpan: d.LoggerTimeSpan;
    transpileBuildCount: number;
    validateTypesPromise: Promise<d.ValidateTypesResults>;
    constructor(config: d.Config, compilerCtx: d.CompilerCtx);
    start(): void;
    createTimeSpan(msg: string, debug?: boolean): {
        finish: (finishedMsg: string, color?: string, bold?: boolean, newLineSuffix?: boolean) => void;
    };
    debug(msg: string): void;
    readonly isActiveBuild: boolean;
    readonly hasError: boolean;
    abort(): Promise<d.BuildResults>;
    finish(): Promise<d.BuildResults>;
    validateTypesBuild(): Promise<void>;
}
