/*! Built with http://stenciljs.com */
import { h } from './app.core.js';
/**
 *
 * @export
 * @class TranslateInput
 * Represents a custom input that includes a title and placeholder.
 * @property {string} word - the value inside of the input.
 * @property {string} description - This will be the title of such input.
 * @property {string} example - The placeholder inside of the input.
 */
var Input = /** @class */ (function () {
    function Input() {
    }
    Input.prototype.render = function () {
        return (h("div", null, h("div", { class: "translate-input" }, h("h4", null, this.description), h("input", { type: "text", value: this.word, placeholder: this.example }))));
    };
    Object.defineProperty(Input, "is", {
        get: function () { return "imr-input"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Input, "properties", {
        get: function () {
            return {
                "description": {
                    "type": String,
                    "attr": "description"
                },
                "example": {
                    "type": String,
                    "attr": "example"
                },
                "word": {
                    "type": String,
                    "attr": "word"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Input, "style", {
        get: function () { return "/**style-placeholder:imr-input:**/"; },
        enumerable: true,
        configurable: true
    });
    return Input;
}());
/**
 *
 *
 * @export
 * @class LanguageCard
 */
var LanguageCard = /** @class */ (function () {
    function LanguageCard() {
    }
    LanguageCard.prototype.render = function () {
        return [
            h("img", { src: "" + this.imgPath, srcSet: this.imgPath + " 1x, " + this.imgPath + "@2x 2x", alt: this.alt }),
            h("p", null, this.name)
        ];
    };
    Object.defineProperty(LanguageCard, "is", {
        get: function () { return "imr-language-card"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LanguageCard, "properties", {
        get: function () {
            return {
                "alt": {
                    "type": String,
                    "attr": "alt"
                },
                "imgPath": {
                    "type": String,
                    "attr": "img-path"
                },
                "name": {
                    "type": String,
                    "attr": "name"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LanguageCard, "style", {
        get: function () { return "/**style-placeholder:imr-language-card:**/"; },
        enumerable: true,
        configurable: true
    });
    return LanguageCard;
}());
/**
 *
 * @export
 * @class TranslateFlagList
 * Element consisting of a list of language cards for choosing the current language.
 * @property {any} languages - The structure for this param is an array of custom objects with
 * the following propertis:
 * @property {string} name -The  simple language 2 letter name. IE: KR, DE, ES, etc.
 * @property {string} imgPath - path from src to the flag image.
 * @property {string} alt -The name of the language represented by the flag in case it doesn't load.
 *
 */
var LanguageList = /** @class */ (function () {
    function LanguageList() {
        this.languages = [
            {
                name: 'KR',
                imgPath: '/assets/img/flags/korean.png',
                alt: 'Hangeul_KR',
            },
            {
                name: 'DE',
                imgPath: '/assets/img/flags/german.png',
                alt: 'Deutsch_DE',
            },
            {
                name: 'FR',
                imgPath: '/assets/img/flags/french.png',
                alt: 'French_FR',
            },
            {
                name: 'ES',
                imgPath: '/assets/img/flags/spanish.png',
                alt: 'Spanish_MX',
            }
        ];
    }
    LanguageList.prototype.render = function () {
        return (this.languages.map(function (demo) { return h("imr-language-card", { name: demo.name, imgPath: demo.imgPath, alt: demo.alt }); }));
    };
    Object.defineProperty(LanguageList, "is", {
        get: function () { return "imr-language-list"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LanguageList, "style", {
        get: function () { return "/**style-placeholder:imr-language-list:**/"; },
        enumerable: true,
        configurable: true
    });
    return LanguageList;
}());
var MainPage = /** @class */ (function () {
    function MainPage() {
        var _this = this;
        this.reload = function () {
            document.getElementById('reload').onclick = function () {
                chrome.runtime.sendMessage({ message: "reload" }, function (response) {
                    console.log("SENT GREETING atm");
                    console.log(response);
                });
            };
        };
        this.settings = {
            value: "",
            translation: "",
            insensitive: true,
            ignoreWhiteSpace: false
        };
        this.addWord = function () {
            chrome.storage.sync.get(['imrkorean'], function (result) {
                console.log("found our word");
                var newItems = result['imrkorean'];
                newItems[_this.settings.value] = _this.settings;
                chrome.storage.sync.set({ 'imrkorean': newItems }), function () {
                    console.log("adding word this");
                };
                console.log("adding word", newItems);
                var inputs = _this.el.querySelectorAll("imr-input");
                inputs.forEach(function (imrinput) {
                    imrinput.word = "";
                });
            });
        };
        document.title = "Immerse";
    }
    MainPage.prototype.valueBind = function (event) {
        this.settings.value = event.target.value;
    };
    MainPage.prototype.translationBind = function (event) {
        this.settings.translation = event.target.value;
    };
    MainPage.prototype.render = function () {
        var _this = this;
        return (h("div", { class: "main-wrapper" }, h("button", { id: "reload", onClick: this.reload }, "RELOAD"), h("imr-language-list", null), h("main", null, h("h2", null, "Immerse"), h("imr-input", { description: "Old word", example: "cat", onChange: function (event) { return _this.valueBind(event); } }), h("imr-input", { description: "New word", example: "Katze", onChange: function (event) { return _this.translationBind(event); } }), h("button", { id: "add-button", onClick: this.addWord }, "Add"))));
    };
    Object.defineProperty(MainPage, "is", {
        get: function () { return "imr-view-main"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainPage, "properties", {
        get: function () {
            return {
                "el": {
                    "elementRef": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainPage, "style", {
        get: function () { return "/**style-placeholder:imr-view-main:**/"; },
        enumerable: true,
        configurable: true
    });
    return MainPage;
}());
export { Input as ImrInput, LanguageCard as ImrLanguageCard, LanguageList as ImrLanguageList, MainPage as ImrViewMain };
