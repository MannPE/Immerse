/*! Built with http://stenciljs.com */
import { h } from './app.core.js';
var ViewWordList = /** @class */ (function () {
    function ViewWordList() {
        this.words = [];
    }
    ViewWordList.prototype.componentWillLoad = function () {
        chrome.storage.sync.get(['imrkorean'], function (result) {
            var _this = this;
            var res = function () { return _this.setWords(result['imrkorean']); };
            console.log("words loaded into wordlist", res);
        });
    };
    ViewWordList.prototype.loadWords = function () {
        console.log(this.words);
    };
    ViewWordList.prototype.setWords = function (any) {
        this.words = any;
        console.log("setting words", any, this.words);
    };
    ViewWordList.prototype.componentDidLoad = function () {
        console.log("did load");
        console.log(this);
        console.log(this["el"]);
        console.log(this._el);
    };
    ViewWordList.prototype.componentWillUpdate = function () {
        console.log("will update");
        console.log(this);
    };
    ViewWordList.prototype.componentDidUpdate = function () {
        console.log("did update");
        console.log(this);
    };
    ViewWordList.prototype.componentDidUnload = function () {
        console.log("unloaded component");
        console.log(this);
    };
    ViewWordList.prototype.render = function () {
        console.log("rendered");
        // if(this.words)
        // return[ 
        //   this.words.map(word=>(
        //       <imr-word-item 
        //         value = {word.value}
        //         translation = {word.translation}
        //         insensitive = {word.insensitive}
        //         ignoreWhiteSpace = {word.ignoreWhiteSpace}
        //       />
        // ))];
        if (this.words.lenght > 0)
            return h("div", null, "LOTS OF WORDS");
        else
            return h("div", null, "NO WORDS");
    };
    Object.defineProperty(ViewWordList, "is", {
        get: function () { return "imr-view-word-list"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewWordList, "properties", {
        get: function () {
            return {
                "_el": {
                    "elementRef": true
                },
                "loadWords": {
                    "method": true
                },
                "setWords": {
                    "method": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewWordList, "style", {
        get: function () { return "/**style-placeholder:imr-view-word-list:**/"; },
        enumerable: true,
        configurable: true
    });
    return ViewWordList;
}());
export { ViewWordList as ImrViewWordList };
