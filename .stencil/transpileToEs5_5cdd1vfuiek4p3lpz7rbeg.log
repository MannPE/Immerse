/*! Built with http://stenciljs.com */
App.loadBundle('chunk-9289fe8e.js', ['exports'], function (exports) {
    var h = window.App.h;
    var __rest = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
                if (e.indexOf(p[i]) < 0)
                    t[p[i]] = s[p[i]];
        return t;
    };
    function defaultConsumerRender(subscribe, child) {
        return h("context-consumer", { subscribe: subscribe, renderer: child });
    }
    function createProviderConsumer(defaultState, consumerRender) {
        if (consumerRender === void 0) { consumerRender = defaultConsumerRender; }
        var listeners = new Map();
        var currentState = defaultState;
        function notifyConsumers() {
            listeners.forEach(updateListener);
        }
        function updateListener(fields, listener) {
            if (Array.isArray(fields)) {
                fields.slice().forEach(function (fieldName) {
                    listener[fieldName] = currentState[fieldName];
                });
            }
            else {
                listener[fields] = Object.assign({}, currentState);
            }
            listener.forceUpdate();
        }
        function attachListener(propList) {
            return function (el) {
                if (listeners.has(el)) {
                    return;
                }
                listeners.set(el, propList);
                updateListener(propList, el);
            };
        }
        function subscribe(el, propList) {
            attachListener(propList)(el);
            return function () {
                listeners.delete(el);
            };
        }
        function Provider(_b) {
            var state = _b.state, children = _b.children;
            currentState = state;
            notifyConsumers();
            return children;
        }
        function Consumer(_b) {
            var children = _b.children;
            return consumerRender(subscribe, children[0]);
        }
        function wrapConsumer(childComponent, fieldList) {
            var Child = childComponent.is;
            return function (_a) {
                var children = _a.children, props = __rest(_a, ["children"]);
                return (h(Child, Object.assign({ ref: attachListener(fieldList) }, props), children));
            };
        }
        function injectProps(childComponent, fieldList) {
            var unsubscribe = null;
            var prevComponentWillLoad = childComponent.prototype.componentWillLoad;
            childComponent.prototype.componentWillLoad = function () {
                unsubscribe = subscribe(this.el, fieldList);
                if (prevComponentWillLoad) {
                    return prevComponentWillLoad.bind(this)();
                }
            };
            var prevComponentDidUnload = childComponent.prototype.componentDidUnload;
            childComponent.prototype.componentDidUnload = function () {
                unsubscribe();
                if (prevComponentDidUnload) {
                    return prevComponentDidUnload.bind(this)();
                }
            };
        }
        return {
            Provider: Provider,
            Consumer: Consumer,
            wrapConsumer: wrapConsumer,
            injectProps: injectProps
        };
    }
    var SiteProviderConsumer = createProviderConsumer({
        isLeftSidebarIn: false,
        toggleLeftSidebar: function () { }
    }, function (subscribe, child) { return h("context-consumer", { subscribe: subscribe, renderer: child }); });
    exports.SiteProviderConsumer = SiteProviderConsumer;
});
