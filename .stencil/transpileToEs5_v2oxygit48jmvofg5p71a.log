var ContextConsumer = /** @class */ (function () {
    function ContextConsumer() {
        this.context = {};
        this.renderer = function (props) {
            return null;
        };
    }
    ContextConsumer.prototype.componentWillLoad = function () {
        this.unsubscribe = this.subscribe(this.el, 'context');
    };
    ContextConsumer.prototype.componentDidUnload = function () {
        this.unsubscribe();
    };
    ContextConsumer.prototype.render = function () {
        return this.renderer(Object.assign({}, this.context));
    };
    Object.defineProperty(ContextConsumer, "is", {
        get: function () { return "context-consumer"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextConsumer, "properties", {
        get: function () {
            return {
                "context": {
                    "type": "Any",
                    "attr": "context"
                },
                "el": {
                    "elementRef": true
                },
                "renderer": {
                    "type": "Any",
                    "attr": "renderer"
                },
                "subscribe": {
                    "type": "Any",
                    "attr": "subscribe"
                },
                "unsubscribe": {
                    "state": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    return ContextConsumer;
}());
export { ContextConsumer };
