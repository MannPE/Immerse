/*! Built with http://stenciljs.com */
App.loadBundle('/**:bundle-id:**/', ['exports'], function (exports) {
    var h = window.App.h;
    /**
     *
     * @export
     * @class TranslateInput
     * Represents a custom input that includes a title and placeholder.
     * @property {string} word - the value inside of the input.
     * @property {string} description - This will be the title of such input.
     * @property {string} example - The placeholder inside of the input.
     */
    var Input = /** @class */ (function () {
        function Input() {
        }
        Input.prototype.render = function () {
            return (h("div", null, h("div", { class: "translate-input" }, h("h4", null, this.description), h("input", { type: "text", value: this.word, placeholder: this.example }))));
        };
        Object.defineProperty(Input, "is", {
            get: function () { return "imr-input"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Input, "properties", {
            get: function () {
                return {
                    "description": {
                        "type": String,
                        "attr": "description"
                    },
                    "example": {
                        "type": String,
                        "attr": "example"
                    },
                    "word": {
                        "type": String,
                        "attr": "word"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Input, "style", {
            get: function () { return "/**style-placeholder:imr-input:**/"; },
            enumerable: true,
            configurable: true
        });
        return Input;
    }());
    /**
     *
     *
     * @export
     * @class LanguageCard
     */
    var LanguageCard = /** @class */ (function () {
        function LanguageCard() {
        }
        LanguageCard.prototype.render = function () {
            return [
                h("img", { src: "" + this.imgPath, srcSet: this.imgPath + " 1x, " + this.imgPath + "@2x 2x", alt: this.alt }),
                h("p", null, this.name)
            ];
        };
        Object.defineProperty(LanguageCard, "is", {
            get: function () { return "imr-language-card"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LanguageCard, "properties", {
            get: function () {
                return {
                    "alt": {
                        "type": String,
                        "attr": "alt"
                    },
                    "imgPath": {
                        "type": String,
                        "attr": "img-path"
                    },
                    "name": {
                        "type": String,
                        "attr": "name"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LanguageCard, "style", {
            get: function () { return "/**style-placeholder:imr-language-card:**/"; },
            enumerable: true,
            configurable: true
        });
        return LanguageCard;
    }());
    /**
     *
     * @export
     * @class TranslateFlagList
     * Element consisting of a list of language cards for choosing the current language.
     * @property {any} languages - The structure for this param is an array of custom objects with
     * the following propertis:
     * @property {string} name -The  simple language 2 letter name. IE: KR, DE, ES, etc.
     * @property {string} imgPath - path from src to the flag image.
     * @property {string} alt -The name of the language represented by the flag in case it doesn't load.
     *
     */
    var LanguageList = /** @class */ (function () {
        function LanguageList() {
            this.languages = [
                {
                    name: 'KR',
                    imgPath: '/assets/img/flags/korean.png',
                    alt: 'Hangeul_KR',
                },
                {
                    name: 'DE',
                    imgPath: '/assets/img/flags/german.png',
                    alt: 'Deutsch_DE',
                },
                {
                    name: 'FR',
                    imgPath: '/assets/img/flags/french.png',
                    alt: 'French_FR',
                },
                {
                    name: 'ES',
                    imgPath: '/assets/img/flags/spanish.png',
                    alt: 'Spanish_MX',
                }
            ];
        }
        LanguageList.prototype.render = function () {
            return (this.languages.map(function (demo) { return h("imr-language-card", { name: demo.name, imgPath: demo.imgPath, alt: demo.alt }); }));
        };
        Object.defineProperty(LanguageList, "is", {
            get: function () { return "imr-language-list"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LanguageList, "style", {
            get: function () { return "/**style-placeholder:imr-language-list:**/"; },
            enumerable: true,
            configurable: true
        });
        return LanguageList;
    }());
    var MainPage = /** @class */ (function () {
        function MainPage() {
            document.title = "Immerse";
        }
        MainPage.prototype.componentDidLoad = function () {
            console.log('didLoad called on landing page');
            // unfortunately necessary hack because Edge
            // dont show the animated youtube video in Edge because
            // pointer-events: none; is broken in Edge
            // just link to the youtube video directly like we do on mobile
            if (document.documentMode || /Edge/.test(navigator.userAgent)) {
                this.el.querySelector('#youtube-video').style.display = 'none';
                this.el.querySelector('#launch-video').style.display = 'none';
                this.el.querySelector('#background').style.display = 'none';
                this.el.querySelector('#mobile-video').style.display = 'flex';
            }
        };
        MainPage.prototype.render = function () {
            return (h("div", null, h("imr-language-list", null), h("h2", null, "Immerse"), h("imr-input", { description: "Old word", example: "cat" }), h("imr-input", { description: "New word", example: "Katze" }), h("button", { id: "add-button" }, "Add")));
        };
        Object.defineProperty(MainPage, "is", {
            get: function () { return "imr-view-main"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainPage, "properties", {
            get: function () {
                return {
                    "el": {
                        "elementRef": true
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainPage, "style", {
            get: function () { return "/**style-placeholder:imr-view-main:**/"; },
            enumerable: true,
            configurable: true
        });
        return MainPage;
    }());
    exports.ImrInput = Input;
    exports.ImrLanguageCard = LanguageCard;
    exports.ImrLanguageList = LanguageList;
    exports.ImrViewMain = MainPage;
    Object.defineProperty(exports, '__esModule', { value: true });
});
