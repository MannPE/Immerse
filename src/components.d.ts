/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  ImmerseWord,
} from './storage-manager/types';

export namespace Components {
  interface AppIcon {
    'name': string;
  }
  interface ImrAppHeader {}
  interface ImrAppRoot {}
  interface ImrAppWizard {}
  interface ImrInput {
    'description': string;
    'example': string;
    'word': string;
  }
  interface ImrLanguageList {}
  interface ImrToast {}
  interface ImrViewMain {
    'currentDomain': string;
  }
  interface ImrViewSettings {}
  interface ImrViewWordList {
    'refreshCurrentWordList': (loadedWords: ImmerseWord[]) => Promise<void>;
  }
  interface ImrWordItem {
    'altText'?: string;
    'caseSensitive': boolean;
    'ignoreWhiteSpace': boolean;
    'onDelete': Function;
    'singular': boolean;
    'translation': string;
    'type': string;
    'value': string;
  }
}

declare global {


  interface HTMLAppIconElement extends Components.AppIcon, HTMLStencilElement {}
  var HTMLAppIconElement: {
    prototype: HTMLAppIconElement;
    new (): HTMLAppIconElement;
  };

  interface HTMLImrAppHeaderElement extends Components.ImrAppHeader, HTMLStencilElement {}
  var HTMLImrAppHeaderElement: {
    prototype: HTMLImrAppHeaderElement;
    new (): HTMLImrAppHeaderElement;
  };

  interface HTMLImrAppRootElement extends Components.ImrAppRoot, HTMLStencilElement {}
  var HTMLImrAppRootElement: {
    prototype: HTMLImrAppRootElement;
    new (): HTMLImrAppRootElement;
  };

  interface HTMLImrAppWizardElement extends Components.ImrAppWizard, HTMLStencilElement {}
  var HTMLImrAppWizardElement: {
    prototype: HTMLImrAppWizardElement;
    new (): HTMLImrAppWizardElement;
  };

  interface HTMLImrInputElement extends Components.ImrInput, HTMLStencilElement {}
  var HTMLImrInputElement: {
    prototype: HTMLImrInputElement;
    new (): HTMLImrInputElement;
  };

  interface HTMLImrLanguageListElement extends Components.ImrLanguageList, HTMLStencilElement {}
  var HTMLImrLanguageListElement: {
    prototype: HTMLImrLanguageListElement;
    new (): HTMLImrLanguageListElement;
  };

  interface HTMLImrToastElement extends Components.ImrToast, HTMLStencilElement {}
  var HTMLImrToastElement: {
    prototype: HTMLImrToastElement;
    new (): HTMLImrToastElement;
  };

  interface HTMLImrViewMainElement extends Components.ImrViewMain, HTMLStencilElement {}
  var HTMLImrViewMainElement: {
    prototype: HTMLImrViewMainElement;
    new (): HTMLImrViewMainElement;
  };

  interface HTMLImrViewSettingsElement extends Components.ImrViewSettings, HTMLStencilElement {}
  var HTMLImrViewSettingsElement: {
    prototype: HTMLImrViewSettingsElement;
    new (): HTMLImrViewSettingsElement;
  };

  interface HTMLImrViewWordListElement extends Components.ImrViewWordList, HTMLStencilElement {}
  var HTMLImrViewWordListElement: {
    prototype: HTMLImrViewWordListElement;
    new (): HTMLImrViewWordListElement;
  };

  interface HTMLImrWordItemElement extends Components.ImrWordItem, HTMLStencilElement {}
  var HTMLImrWordItemElement: {
    prototype: HTMLImrWordItemElement;
    new (): HTMLImrWordItemElement;
  };
  interface HTMLElementTagNameMap {
    'app-icon': HTMLAppIconElement;
    'imr-app-header': HTMLImrAppHeaderElement;
    'imr-app-root': HTMLImrAppRootElement;
    'imr-app-wizard': HTMLImrAppWizardElement;
    'imr-input': HTMLImrInputElement;
    'imr-language-list': HTMLImrLanguageListElement;
    'imr-toast': HTMLImrToastElement;
    'imr-view-main': HTMLImrViewMainElement;
    'imr-view-settings': HTMLImrViewSettingsElement;
    'imr-view-word-list': HTMLImrViewWordListElement;
    'imr-word-item': HTMLImrWordItemElement;
  }
}

declare namespace LocalJSX {
  interface AppIcon {
    'name'?: string;
  }
  interface ImrAppHeader {}
  interface ImrAppRoot {}
  interface ImrAppWizard {}
  interface ImrInput {
    'description'?: string;
    'example'?: string;
    'word'?: string;
  }
  interface ImrLanguageList {}
  interface ImrToast {}
  interface ImrViewMain {
    'currentDomain'?: string;
  }
  interface ImrViewSettings {}
  interface ImrViewWordList {}
  interface ImrWordItem {
    'altText'?: string;
    'caseSensitive'?: boolean;
    'ignoreWhiteSpace'?: boolean;
    'onDelete'?: Function;
    'singular'?: boolean;
    'translation'?: string;
    'type'?: string;
    'value'?: string;
  }

  interface IntrinsicElements {
    'app-icon': AppIcon;
    'imr-app-header': ImrAppHeader;
    'imr-app-root': ImrAppRoot;
    'imr-app-wizard': ImrAppWizard;
    'imr-input': ImrInput;
    'imr-language-list': ImrLanguageList;
    'imr-toast': ImrToast;
    'imr-view-main': ImrViewMain;
    'imr-view-settings': ImrViewSettings;
    'imr-view-word-list': ImrViewWordList;
    'imr-word-item': ImrWordItem;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-icon': LocalJSX.AppIcon & JSXBase.HTMLAttributes<HTMLAppIconElement>;
      'imr-app-header': LocalJSX.ImrAppHeader & JSXBase.HTMLAttributes<HTMLImrAppHeaderElement>;
      'imr-app-root': LocalJSX.ImrAppRoot & JSXBase.HTMLAttributes<HTMLImrAppRootElement>;
      'imr-app-wizard': LocalJSX.ImrAppWizard & JSXBase.HTMLAttributes<HTMLImrAppWizardElement>;
      'imr-input': LocalJSX.ImrInput & JSXBase.HTMLAttributes<HTMLImrInputElement>;
      'imr-language-list': LocalJSX.ImrLanguageList & JSXBase.HTMLAttributes<HTMLImrLanguageListElement>;
      'imr-toast': LocalJSX.ImrToast & JSXBase.HTMLAttributes<HTMLImrToastElement>;
      'imr-view-main': LocalJSX.ImrViewMain & JSXBase.HTMLAttributes<HTMLImrViewMainElement>;
      'imr-view-settings': LocalJSX.ImrViewSettings & JSXBase.HTMLAttributes<HTMLImrViewSettingsElement>;
      'imr-view-word-list': LocalJSX.ImrViewWordList & JSXBase.HTMLAttributes<HTMLImrViewWordListElement>;
      'imr-word-item': LocalJSX.ImrWordItem & JSXBase.HTMLAttributes<HTMLImrWordItemElement>;
    }
  }
}


