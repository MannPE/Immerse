/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';
import '@stencil/state-tunnel';


declare global {

  namespace StencilComponents {
    interface AppBurger {
      'toggleLeftSidebar': () => void;
    }
  }

  interface HTMLAppBurgerElement extends StencilComponents.AppBurger, HTMLStencilElement {}

  var HTMLAppBurgerElement: {
    prototype: HTMLAppBurgerElement;
    new (): HTMLAppBurgerElement;
  };
  interface HTMLElementTagNameMap {
    'app-burger': HTMLAppBurgerElement;
  }
  interface ElementTagNameMap {
    'app-burger': HTMLAppBurgerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-burger': JSXElements.AppBurgerAttributes;
    }
  }
  namespace JSXElements {
    export interface AppBurgerAttributes extends HTMLAttributes {
      'toggleLeftSidebar'?: () => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImrAppHeader {

    }
  }

  interface HTMLImrAppHeaderElement extends StencilComponents.ImrAppHeader, HTMLStencilElement {}

  var HTMLImrAppHeaderElement: {
    prototype: HTMLImrAppHeaderElement;
    new (): HTMLImrAppHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'imr-app-header': HTMLImrAppHeaderElement;
  }
  interface ElementTagNameMap {
    'imr-app-header': HTMLImrAppHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'imr-app-header': JSXElements.ImrAppHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface ImrAppHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppIcon {
      'name': string;
    }
  }

  interface HTMLAppIconElement extends StencilComponents.AppIcon, HTMLStencilElement {}

  var HTMLAppIconElement: {
    prototype: HTMLAppIconElement;
    new (): HTMLAppIconElement;
  };
  interface HTMLElementTagNameMap {
    'app-icon': HTMLAppIconElement;
  }
  interface ElementTagNameMap {
    'app-icon': HTMLAppIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-icon': JSXElements.AppIconAttributes;
    }
  }
  namespace JSXElements {
    export interface AppIconAttributes extends HTMLAttributes {
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppMarked {
      'doc': string;
    }
  }

  interface HTMLAppMarkedElement extends StencilComponents.AppMarked, HTMLStencilElement {}

  var HTMLAppMarkedElement: {
    prototype: HTMLAppMarkedElement;
    new (): HTMLAppMarkedElement;
  };
  interface HTMLElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  interface ElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-marked': JSXElements.AppMarkedAttributes;
    }
  }
  namespace JSXElements {
    export interface AppMarkedAttributes extends HTMLAttributes {
      'doc'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImrAppRoot {

    }
  }

  interface HTMLImrAppRootElement extends StencilComponents.ImrAppRoot, HTMLStencilElement {}

  var HTMLImrAppRootElement: {
    prototype: HTMLImrAppRootElement;
    new (): HTMLImrAppRootElement;
  };
  interface HTMLElementTagNameMap {
    'imr-app-root': HTMLImrAppRootElement;
  }
  interface ElementTagNameMap {
    'imr-app-root': HTMLImrAppRootElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'imr-app-root': JSXElements.ImrAppRootAttributes;
    }
  }
  namespace JSXElements {
    export interface ImrAppRootAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImrInput {
      'description': string;
      'example': string;
      'word': string;
    }
  }

  interface HTMLImrInputElement extends StencilComponents.ImrInput, HTMLStencilElement {}

  var HTMLImrInputElement: {
    prototype: HTMLImrInputElement;
    new (): HTMLImrInputElement;
  };
  interface HTMLElementTagNameMap {
    'imr-input': HTMLImrInputElement;
  }
  interface ElementTagNameMap {
    'imr-input': HTMLImrInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'imr-input': JSXElements.ImrInputAttributes;
    }
  }
  namespace JSXElements {
    export interface ImrInputAttributes extends HTMLAttributes {
      'description'?: string;
      'example'?: string;
      'word'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImrLanguageCard {
      'alt': string;
      'imgPath': string;
      'name': string;
    }
  }

  interface HTMLImrLanguageCardElement extends StencilComponents.ImrLanguageCard, HTMLStencilElement {}

  var HTMLImrLanguageCardElement: {
    prototype: HTMLImrLanguageCardElement;
    new (): HTMLImrLanguageCardElement;
  };
  interface HTMLElementTagNameMap {
    'imr-language-card': HTMLImrLanguageCardElement;
  }
  interface ElementTagNameMap {
    'imr-language-card': HTMLImrLanguageCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'imr-language-card': JSXElements.ImrLanguageCardAttributes;
    }
  }
  namespace JSXElements {
    export interface ImrLanguageCardAttributes extends HTMLAttributes {
      'alt'?: string;
      'imgPath'?: string;
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImrLanguageList {

    }
  }

  interface HTMLImrLanguageListElement extends StencilComponents.ImrLanguageList, HTMLStencilElement {}

  var HTMLImrLanguageListElement: {
    prototype: HTMLImrLanguageListElement;
    new (): HTMLImrLanguageListElement;
  };
  interface HTMLElementTagNameMap {
    'imr-language-list': HTMLImrLanguageListElement;
  }
  interface ElementTagNameMap {
    'imr-language-list': HTMLImrLanguageListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'imr-language-list': JSXElements.ImrLanguageListAttributes;
    }
  }
  namespace JSXElements {
    export interface ImrLanguageListAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface LazyIframe {
      'frameBorder': string;
      'height': string;
      'name': string;
      'scrolling': string;
      'src': string;
      'width': string;
    }
  }

  interface HTMLLazyIframeElement extends StencilComponents.LazyIframe, HTMLStencilElement {}

  var HTMLLazyIframeElement: {
    prototype: HTMLLazyIframeElement;
    new (): HTMLLazyIframeElement;
  };
  interface HTMLElementTagNameMap {
    'lazy-iframe': HTMLLazyIframeElement;
  }
  interface ElementTagNameMap {
    'lazy-iframe': HTMLLazyIframeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lazy-iframe': JSXElements.LazyIframeAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyIframeAttributes extends HTMLAttributes {
      'frameBorder'?: string;
      'height'?: string;
      'name'?: string;
      'scrolling'?: string;
      'src'?: string;
      'width'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NotfoundPage {

    }
  }

  interface HTMLNotfoundPageElement extends StencilComponents.NotfoundPage, HTMLStencilElement {}

  var HTMLNotfoundPageElement: {
    prototype: HTMLNotfoundPageElement;
    new (): HTMLNotfoundPageElement;
  };
  interface HTMLElementTagNameMap {
    'notfound-page': HTMLNotfoundPageElement;
  }
  interface ElementTagNameMap {
    'notfound-page': HTMLNotfoundPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'notfound-page': JSXElements.NotfoundPageAttributes;
    }
  }
  namespace JSXElements {
    export interface NotfoundPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PwasPage {

    }
  }

  interface HTMLPwasPageElement extends StencilComponents.PwasPage, HTMLStencilElement {}

  var HTMLPwasPageElement: {
    prototype: HTMLPwasPageElement;
    new (): HTMLPwasPageElement;
  };
  interface HTMLElementTagNameMap {
    'pwas-page': HTMLPwasPageElement;
  }
  interface ElementTagNameMap {
    'pwas-page': HTMLPwasPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pwas-page': JSXElements.PwasPageAttributes;
    }
  }
  namespace JSXElements {
    export interface PwasPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ResourcesPage {

    }
  }

  interface HTMLResourcesPageElement extends StencilComponents.ResourcesPage, HTMLStencilElement {}

  var HTMLResourcesPageElement: {
    prototype: HTMLResourcesPageElement;
    new (): HTMLResourcesPageElement;
  };
  interface HTMLElementTagNameMap {
    'resources-page': HTMLResourcesPageElement;
  }
  interface ElementTagNameMap {
    'resources-page': HTMLResourcesPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'resources-page': JSXElements.ResourcesPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ResourcesPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SiteHeader {

    }
  }

  interface HTMLSiteHeaderElement extends StencilComponents.SiteHeader, HTMLStencilElement {}

  var HTMLSiteHeaderElement: {
    prototype: HTMLSiteHeaderElement;
    new (): HTMLSiteHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-header': JSXElements.SiteHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImrViewMain {

    }
  }

  interface HTMLImrViewMainElement extends StencilComponents.ImrViewMain, HTMLStencilElement {}

  var HTMLImrViewMainElement: {
    prototype: HTMLImrViewMainElement;
    new (): HTMLImrViewMainElement;
  };
  interface HTMLElementTagNameMap {
    'imr-view-main': HTMLImrViewMainElement;
  }
  interface ElementTagNameMap {
    'imr-view-main': HTMLImrViewMainElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'imr-view-main': JSXElements.ImrViewMainAttributes;
    }
  }
  namespace JSXElements {
    export interface ImrViewMainAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImrViewWordList {

    }
  }

  interface HTMLImrViewWordListElement extends StencilComponents.ImrViewWordList, HTMLStencilElement {}

  var HTMLImrViewWordListElement: {
    prototype: HTMLImrViewWordListElement;
    new (): HTMLImrViewWordListElement;
  };
  interface HTMLElementTagNameMap {
    'imr-view-word-list': HTMLImrViewWordListElement;
  }
  interface ElementTagNameMap {
    'imr-view-word-list': HTMLImrViewWordListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'imr-view-word-list': JSXElements.ImrViewWordListAttributes;
    }
  }
  namespace JSXElements {
    export interface ImrViewWordListAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImrWordItem {
      'lang': string;
      'singular': boolean;
      'translation': string;
      'type': string;
      'value': string;
    }
  }

  interface HTMLImrWordItemElement extends StencilComponents.ImrWordItem, HTMLStencilElement {}

  var HTMLImrWordItemElement: {
    prototype: HTMLImrWordItemElement;
    new (): HTMLImrWordItemElement;
  };
  interface HTMLElementTagNameMap {
    'imr-word-item': HTMLImrWordItemElement;
  }
  interface ElementTagNameMap {
    'imr-word-item': HTMLImrWordItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'imr-word-item': JSXElements.ImrWordItemAttributes;
    }
  }
  namespace JSXElements {
    export interface ImrWordItemAttributes extends HTMLAttributes {
      'lang'?: string;
      'singular'?: boolean;
      'translation'?: string;
      'type'?: string;
      'value'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;