/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';
import '@stencil/state-tunnel';


declare global {

  namespace StencilComponents {
    interface AppBurger {
      'toggleLeftSidebar': () => void;
    }
  }

  interface HTMLAppBurgerElement extends StencilComponents.AppBurger, HTMLStencilElement {}

  var HTMLAppBurgerElement: {
    prototype: HTMLAppBurgerElement;
    new (): HTMLAppBurgerElement;
  };
  interface HTMLElementTagNameMap {
    'app-burger': HTMLAppBurgerElement;
  }
  interface ElementTagNameMap {
    'app-burger': HTMLAppBurgerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-burger': JSXElements.AppBurgerAttributes;
    }
  }
  namespace JSXElements {
    export interface AppBurgerAttributes extends HTMLAttributes {
      'toggleLeftSidebar'?: () => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppIcon {
      'name': string;
    }
  }

  interface HTMLAppIconElement extends StencilComponents.AppIcon, HTMLStencilElement {}

  var HTMLAppIconElement: {
    prototype: HTMLAppIconElement;
    new (): HTMLAppIconElement;
  };
  interface HTMLElementTagNameMap {
    'app-icon': HTMLAppIconElement;
  }
  interface ElementTagNameMap {
    'app-icon': HTMLAppIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-icon': JSXElements.AppIconAttributes;
    }
  }
  namespace JSXElements {
    export interface AppIconAttributes extends HTMLAttributes {
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppMarked {
      'doc': string;
    }
  }

  interface HTMLAppMarkedElement extends StencilComponents.AppMarked, HTMLStencilElement {}

  var HTMLAppMarkedElement: {
    prototype: HTMLAppMarkedElement;
    new (): HTMLAppMarkedElement;
  };
  interface HTMLElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  interface ElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-marked': JSXElements.AppMarkedAttributes;
    }
  }
  namespace JSXElements {
    export interface AppMarkedAttributes extends HTMLAttributes {
      'doc'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DocumentComponent {
      'pages': string[];
    }
  }

  interface HTMLDocumentComponentElement extends StencilComponents.DocumentComponent, HTMLStencilElement {}

  var HTMLDocumentComponentElement: {
    prototype: HTMLDocumentComponentElement;
    new (): HTMLDocumentComponentElement;
  };
  interface HTMLElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  interface ElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'document-component': JSXElements.DocumentComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface DocumentComponentAttributes extends HTMLAttributes {
      'pages'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LanguageCard {
      'alt': string;
      'imgPath': string;
      'name': string;
    }
  }

  interface HTMLLanguageCardElement extends StencilComponents.LanguageCard, HTMLStencilElement {}

  var HTMLLanguageCardElement: {
    prototype: HTMLLanguageCardElement;
    new (): HTMLLanguageCardElement;
  };
  interface HTMLElementTagNameMap {
    'language-card': HTMLLanguageCardElement;
  }
  interface ElementTagNameMap {
    'language-card': HTMLLanguageCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'language-card': JSXElements.LanguageCardAttributes;
    }
  }
  namespace JSXElements {
    export interface LanguageCardAttributes extends HTMLAttributes {
      'alt'?: string;
      'imgPath'?: string;
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LazyIframe {
      'frameBorder': string;
      'height': string;
      'name': string;
      'scrolling': string;
      'src': string;
      'width': string;
    }
  }

  interface HTMLLazyIframeElement extends StencilComponents.LazyIframe, HTMLStencilElement {}

  var HTMLLazyIframeElement: {
    prototype: HTMLLazyIframeElement;
    new (): HTMLLazyIframeElement;
  };
  interface HTMLElementTagNameMap {
    'lazy-iframe': HTMLLazyIframeElement;
  }
  interface ElementTagNameMap {
    'lazy-iframe': HTMLLazyIframeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lazy-iframe': JSXElements.LazyIframeAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyIframeAttributes extends HTMLAttributes {
      'frameBorder'?: string;
      'height'?: string;
      'name'?: string;
      'scrolling'?: string;
      'src'?: string;
      'width'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MainPage {

    }
  }

  interface HTMLMainPageElement extends StencilComponents.MainPage, HTMLStencilElement {}

  var HTMLMainPageElement: {
    prototype: HTMLMainPageElement;
    new (): HTMLMainPageElement;
  };
  interface HTMLElementTagNameMap {
    'main-page': HTMLMainPageElement;
  }
  interface ElementTagNameMap {
    'main-page': HTMLMainPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'main-page': JSXElements.MainPageAttributes;
    }
  }
  namespace JSXElements {
    export interface MainPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface NotfoundPage {

    }
  }

  interface HTMLNotfoundPageElement extends StencilComponents.NotfoundPage, HTMLStencilElement {}

  var HTMLNotfoundPageElement: {
    prototype: HTMLNotfoundPageElement;
    new (): HTMLNotfoundPageElement;
  };
  interface HTMLElementTagNameMap {
    'notfound-page': HTMLNotfoundPageElement;
  }
  interface ElementTagNameMap {
    'notfound-page': HTMLNotfoundPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'notfound-page': JSXElements.NotfoundPageAttributes;
    }
  }
  namespace JSXElements {
    export interface NotfoundPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PwasPage {

    }
  }

  interface HTMLPwasPageElement extends StencilComponents.PwasPage, HTMLStencilElement {}

  var HTMLPwasPageElement: {
    prototype: HTMLPwasPageElement;
    new (): HTMLPwasPageElement;
  };
  interface HTMLElementTagNameMap {
    'pwas-page': HTMLPwasPageElement;
  }
  interface ElementTagNameMap {
    'pwas-page': HTMLPwasPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pwas-page': JSXElements.PwasPageAttributes;
    }
  }
  namespace JSXElements {
    export interface PwasPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ResourcesPage {

    }
  }

  interface HTMLResourcesPageElement extends StencilComponents.ResourcesPage, HTMLStencilElement {}

  var HTMLResourcesPageElement: {
    prototype: HTMLResourcesPageElement;
    new (): HTMLResourcesPageElement;
  };
  interface HTMLElementTagNameMap {
    'resources-page': HTMLResourcesPageElement;
  }
  interface ElementTagNameMap {
    'resources-page': HTMLResourcesPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'resources-page': JSXElements.ResourcesPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ResourcesPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SiteHeader {

    }
  }

  interface HTMLSiteHeaderElement extends StencilComponents.SiteHeader, HTMLStencilElement {}

  var HTMLSiteHeaderElement: {
    prototype: HTMLSiteHeaderElement;
    new (): HTMLSiteHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-header': JSXElements.SiteHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SiteMenu {

    }
  }

  interface HTMLSiteMenuElement extends StencilComponents.SiteMenu, HTMLStencilElement {}

  var HTMLSiteMenuElement: {
    prototype: HTMLSiteMenuElement;
    new (): HTMLSiteMenuElement;
  };
  interface HTMLElementTagNameMap {
    'site-menu': HTMLSiteMenuElement;
  }
  interface ElementTagNameMap {
    'site-menu': HTMLSiteMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-menu': JSXElements.SiteMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteMenuAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface TranslateFlagList {

    }
  }

  interface HTMLTranslateFlagListElement extends StencilComponents.TranslateFlagList, HTMLStencilElement {}

  var HTMLTranslateFlagListElement: {
    prototype: HTMLTranslateFlagListElement;
    new (): HTMLTranslateFlagListElement;
  };
  interface HTMLElementTagNameMap {
    'translate-flag-list': HTMLTranslateFlagListElement;
  }
  interface ElementTagNameMap {
    'translate-flag-list': HTMLTranslateFlagListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'translate-flag-list': JSXElements.TranslateFlagListAttributes;
    }
  }
  namespace JSXElements {
    export interface TranslateFlagListAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface TranslateHeader {

    }
  }

  interface HTMLTranslateHeaderElement extends StencilComponents.TranslateHeader, HTMLStencilElement {}

  var HTMLTranslateHeaderElement: {
    prototype: HTMLTranslateHeaderElement;
    new (): HTMLTranslateHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'translate-header': HTMLTranslateHeaderElement;
  }
  interface ElementTagNameMap {
    'translate-header': HTMLTranslateHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'translate-header': JSXElements.TranslateHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface TranslateHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface TranslateInput {
      'description': string;
      'example': string;
      'word': string;
    }
  }

  interface HTMLTranslateInputElement extends StencilComponents.TranslateInput, HTMLStencilElement {}

  var HTMLTranslateInputElement: {
    prototype: HTMLTranslateInputElement;
    new (): HTMLTranslateInputElement;
  };
  interface HTMLElementTagNameMap {
    'translate-input': HTMLTranslateInputElement;
  }
  interface ElementTagNameMap {
    'translate-input': HTMLTranslateInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'translate-input': JSXElements.TranslateInputAttributes;
    }
  }
  namespace JSXElements {
    export interface TranslateInputAttributes extends HTMLAttributes {
      'description'?: string;
      'example'?: string;
      'word'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TranslateWord {
      'lang': string;
      'singular': boolean;
      'translation': string;
      'type': string;
      'value': string;
    }
  }

  interface HTMLTranslateWordElement extends StencilComponents.TranslateWord, HTMLStencilElement {}

  var HTMLTranslateWordElement: {
    prototype: HTMLTranslateWordElement;
    new (): HTMLTranslateWordElement;
  };
  interface HTMLElementTagNameMap {
    'translate-word': HTMLTranslateWordElement;
  }
  interface ElementTagNameMap {
    'translate-word': HTMLTranslateWordElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'translate-word': JSXElements.TranslateWordAttributes;
    }
  }
  namespace JSXElements {
    export interface TranslateWordAttributes extends HTMLAttributes {
      'lang'?: string;
      'singular'?: boolean;
      'translation'?: string;
      'type'?: string;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TranslateWordsPage {

    }
  }

  interface HTMLTranslateWordsPageElement extends StencilComponents.TranslateWordsPage, HTMLStencilElement {}

  var HTMLTranslateWordsPageElement: {
    prototype: HTMLTranslateWordsPageElement;
    new (): HTMLTranslateWordsPageElement;
  };
  interface HTMLElementTagNameMap {
    'translate-words-page': HTMLTranslateWordsPageElement;
  }
  interface ElementTagNameMap {
    'translate-words-page': HTMLTranslateWordsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'translate-words-page': JSXElements.TranslateWordsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface TranslateWordsPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface TranslationMainView {

    }
  }

  interface HTMLTranslationMainViewElement extends StencilComponents.TranslationMainView, HTMLStencilElement {}

  var HTMLTranslationMainViewElement: {
    prototype: HTMLTranslationMainViewElement;
    new (): HTMLTranslationMainViewElement;
  };
  interface HTMLElementTagNameMap {
    'translation-main-view': HTMLTranslationMainViewElement;
  }
  interface ElementTagNameMap {
    'translation-main-view': HTMLTranslationMainViewElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'translation-main-view': JSXElements.TranslationMainViewAttributes;
    }
  }
  namespace JSXElements {
    export interface TranslationMainViewAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
